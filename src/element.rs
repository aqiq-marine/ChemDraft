#[derive(Debug, Clone)]
pub enum Element {
    Text(String),
    H(NeutronNum),
    He(NeutronNum),
    Li(NeutronNum),
    Be(NeutronNum),
    B(NeutronNum),
    C(NeutronNum),
    N(NeutronNum),
    O(NeutronNum),
    F(NeutronNum),
    Ne(NeutronNum),
    Na(NeutronNum),
    Mg(NeutronNum),
    Al(NeutronNum),
    Si(NeutronNum),
    P(NeutronNum),
    S(NeutronNum),
    Cl(NeutronNum),
    Ar(NeutronNum),
    K(NeutronNum),
    Ca(NeutronNum),
    Sc(NeutronNum),
    Ti(NeutronNum),
    V(NeutronNum),
    Cr(NeutronNum),
    Mn(NeutronNum),
    Fe(NeutronNum),
    Co(NeutronNum),
    Ni(NeutronNum),
    Cu(NeutronNum),
    Zn(NeutronNum),
    Ga(NeutronNum),
    Ge(NeutronNum),
    As(NeutronNum),
    Se(NeutronNum),
    Br(NeutronNum),
    Kr(NeutronNum),
}

impl Default for Element {
    fn default() -> Self {
        Element::C(6)
    }
}

impl Element {
    pub fn get_atomic_number(&self) -> i32 {
        match self {
            Element::Text(_) => 0,
            Element::H(_) => 1,
            Element::He(_) => 2,
            Element::Li(_) => 3,
            Element::Be(_) => 4,
            Element::B(_) => 5,
            Element::C(_) => 6,
            Element::N(_) => 7,
            Element::O(_) => 8,
            Element::F(_) => 9,
            Element::Ne(_) => 10,
            Element::Na(_) => 11,
            Element::Mg(_) => 12,
            Element::Al(_) => 13,
            Element::Si(_) => 14,
            Element::P(_) => 15,
            Element::S(_) => 16,
            Element::Cl(_) => 17,
            Element::Ar(_) => 18,
            Element::K(_) => 19,
            Element::Ca(_) => 20,
            Element::Sc(_) => 21,
            Element::Ti(_) => 22,
            Element::V(_) => 23,
            Element::Cr(_) => 24,
            Element::Mn(_) => 25,
            Element::Fe(_) => 26,
            Element::Co(_) => 27,
            Element::Ni(_) => 28,
            Element::Cu(_) => 29,
            Element::Zn(_) => 30,
            Element::Ga(_) => 31,
            Element::Ge(_) => 32,
            Element::As(_) => 33,
            Element::Se(_) => 34,
            Element::Br(_) => 35,
            Element::Kr(_) => 36,
        }
    }

    pub fn get_valences(&self) -> i32 {
        match self {
            Element::H(_) | Element::Li(_) | Element::Na(_) | Element::K(_) => 1,
            Element::B(_) | Element::Al(_) | Element::Ga(_) => 3,
            Element::C(_) | Element::Si(_) | Element::Ge(_) => 4,
            Element::N(_) | Element::P(_) | Element::As(_) => 3,
            Element::O(_) | Element::S(_) | Element::Se(_) => 2,
            Element::F(_) | Element::Cl(_) | Element::Br(_) => 1,
            Element::He(_) | Element::Ne(_) | Element::Ar(_) | Element::Kr(_) => 0,
            _ => 1,
        }
    }
    pub fn get_lone_pair(&self) -> i32 {
        match self {
            Element::N(_) | Element::P(_) | Element::As(_) => 1,
            Element::O(_) | Element::S(_) | Element::Se(_) => 2,
            Element::F(_) | Element::Cl(_) | Element::Br(_) => 3,
            _ => 0,
        }
    }
    pub fn symbol(&self) -> String {
        let symbol = match self {
            Element::Text(text) => text.as_str(),
            Element::H(1) => "D",
            Element::H(2) => "T",
            Element::H(_) => "H",
            Element::He(_) => "He",
            Element::Li(_) => "Li",
            Element::Be(_) => "Be",
            Element::B(_) => "B",
            Element::C(_) => "C",
            Element::N(_) => "N",
            Element::O(_) => "O",
            Element::F(_) => "F",
            Element::Ne(_) => "Ne",
            Element::Na(_) => "Na",
            Element::Mg(_) => "Mg",
            Element::Al(_) => "Al",
            Element::Si(_) => "Si",
            Element::P(_) => "P",
            Element::S(_) => "S",
            Element::Cl(_) => "Cl",
            Element::Ar(_) => "Ar",
            Element::K(_) => "K",
            Element::Ca(_) => "Ca",
            Element::Sc(_) => "Sc",
            Element::Ti(_) => "Ti",
            Element::V(_) => "V",
            Element::Cr(_) => "Cr",
            Element::Mn(_) => "Mn",
            Element::Fe(_) => "Fe",
            Element::Co(_) => "Co",
            Element::Ni(_) => "Ni",
            Element::Cu(_) => "Cu",
            Element::Zn(_) => "Zn",
            Element::Ga(_) => "Ga",
            Element::Ge(_) => "Ge",
            Element::As(_) => "As",
            Element::Se(_) => "Se",
            Element::Br(_) => "Br",
            Element::Kr(_) => "Kr",
        };
        String::from(symbol)
    }
    pub fn from_symbol(symbol: &str) -> Option<Element> {
        match symbol {
            "H" => Some(Element::H(0)),
            "He" => Some(Element::He(2)),
            "Li" => Some(Element::Li(4)),
            "Be" => Some(Element::Be(5)),
            "B" => Some(Element::B(6)),
            "C" => Some(Element::C(6)),
            "N" => Some(Element::N(7)),
            "O" => Some(Element::O(8)),
            "F" => Some(Element::F(10)),
            "Ne" => Some(Element::Ne(10)),
            "Na" => Some(Element::Na(12)),
            "Mg" => Some(Element::Mg(12)),
            "Al" => Some(Element::Al(14)),
            "Si" => Some(Element::Si(14)),
            "P" => Some(Element::P(16)),
            "S" => Some(Element::S(16)),
            "Cl" => Some(Element::Cl(18)),
            "Ar" => Some(Element::Ar(22)),
            "K" => Some(Element::K(20)),
            "Ca" => Some(Element::Ca(20)),
            "Sc" => Some(Element::Sc(24)),
            "Ti" => Some(Element::Ti(26)),
            "V" => Some(Element::V(28)),
            "Cr" => Some(Element::Cr(28)),
            "Mn" => Some(Element::Mn(30)),
            "Fe" => Some(Element::Fe(30)),
            "Co" => Some(Element::Co(32)),
            "Ni" => Some(Element::Ni(31)),
            "Cu" => Some(Element::Cu(35)),
            "Zn" => Some(Element::Zn(35)),
            "Ga" => Some(Element::Ga(39)),
            "Ge" => Some(Element::Ge(41)),
            "As" => Some(Element::As(42)),
            "Se" => Some(Element::Se(45)),
            "Br" => Some(Element::Br(45)),
            "Kr" => Some(Element::Kr(48)),
            _ => None,
        }
    }
}

// pub type Charge = i32;
pub type NeutronNum = i32;
